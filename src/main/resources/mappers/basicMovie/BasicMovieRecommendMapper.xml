<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="BasicMovieRecommendMapper">
	<select id="movieList" parameterType="java.util.Map" resultType="basicMovieDTO">
		select * from basicMovie
		<!-- 장르별 -->
		<if test="genre neq null">
			<if test="genre neq 'all'">
				where genre like '%'||#{genre}||'%'
			</if>
			order by user_rating desc
		</if>
		<!-- 년도별 -->
		<if test="year neq null">
			<if test="year eq '1950'">
				where year <![CDATA[ < 1960]]>
			</if>
			<if test="year neq '1950'">
				where year between #{year} and #{year}+10
			</if>
			order by user_rating desc
		</if>
		<!-- group -->
		<if test="group neq null">
			<if test="group eq 'couple'">
				where genre like '%뮤지컬%'
				or genre like '%로맨스%'
				or genre like '%코미디%'
			</if>
			<if test="group eq 'friend'">
				where genre like '%미스터리%'
				or genre like '%코미디%'
				or genre like '%전쟁%'
				or genre like '%액션%'
			</if>
			<if test="group eq 'family'">
				where genre like '%판타지%'
				or genre like '%어드벤처%'
				or genre like '%코미디%'
				or genre like '%가족%'
				or genre like '%애니메이션%'
			</if>
			<if test="group eq 'alone'">
				where genre like '%공포%'
				or genre like '%스릴러%'
				or genre like '%범죄%'
				or genre like '%SF%'
				or genre like '%액션%'
			</if>
			order by DBMS_RANDOM.RANDOM 
		</if>
		<if test="weather neq null">
			<if test="weather eq 0">
				where genre like '%로맨스%'
				or genre like '%어드벤처%'
				or genre like '%코미디%'
				or genre like '%가족%'
				or genre like '%애니메이션%'
			</if>
			<if test="weather eq 1">
				where genre like '%스릴러%'
				or genre like '%범죄%'
				or genre like '%미스터리%'
			</if>
			<if test="weather eq 2">
				where genre like '%공포%'
			</if>
			order by DBMS_RANDOM.RANDOM 
		</if>
	</select>
	<!-- director list -->
	<select id="directorList" resultType="com.moco.movieAPI.movieRecommend.subDTO.DirectorDTO">
		select L.director, avg(L.user_rating) avr from (
		(select rownum, basicmovie.* from basicmovie, (
		(select * from (
		(select count(writer) count, bnum from review group by bnum order by count desc) F)
		where F.count>0) S) where S.bnum=basicmovie.num and rownum<![CDATA[ < 21]]>) L) 
		group by L.director
	</select>
	<!-- review rank -->
	<select id="reviewRankList" resultType="com.moco.movieAPI.movieRecommend.subDTO.ReviewRankDTO">
		select F.count, BasicMovie.* from Basicmovie, ( 
		(select count(writer) count, BNUM from review GROUP by BNUM order by count desc) F)
		where F.BNUM = basicmovie.num and rownum <![CDATA[ < 21]]>
	</select>
	<!-- jjim rank -->
	<select id="jjimRankList" resultType="com.moco.movieAPI.movieRecommend.subDTO.JjimRankDTO">
		select rownum, F.count, BasicMovie.* from Basicmovie, ( 
		(select count(id) count, bnum from jjim group by bnum order by count desc) F)
		where F.BNUM = basicmovie.num and rownum<![CDATA[ < 21]]>
	</select>
	<!-- pub_date list -->
	<select id="recentList" resultType="basicMovieDTO">
		select rownum, F.* from ( 
		(select * from basicmovie where pub_date>sysdate order by pub_date) F)
		where rownum<![CDATA[ < 21]]>
	</select>
	<!-- 나이별 멤버 id 리스트 -->
	<select id="ageGroupList" parameterType="java.util.Map" resultType="String">
		select id from 
		((select TO_CHAR(birth,'YYYY') sys_year4, member.* from member) F)
			<if test="age eq '10'">
			where 2017-F.sys_year4<![CDATA[ < 20]]>
			</if>
			<if test="age eq '20'">
				where 2017-F.sys_year4<![CDATA[ > 19]]> and 2017-F.sys_year4<![CDATA[ < 30]]>
			</if>
			<if test="age eq '30'">
				where 2017-F.sys_year4<![CDATA[ > 29]]> and 2017-F.sys_year4<![CDATA[ < 40]]>
			</if>
			<if test="age eq '40'">
				where 2017-F.sys_year4<![CDATA[ > 39]]> and 2017-F.sys_year4<![CDATA[ < 50]]>
			</if>
			<if test="age eq '50'">
				where 2017-F.sys_year4<![CDATA[ > 49]]>
			</if>
	</select>
	<!-- 나이별 최다 관람(view check) 리스트 -->
	<select id="ageGroupViewList" parameterType="java.util.Map" resultType="com.moco.movieAPI.movieRecommend.subDTO.AgeViewDTO" >
		select * from basicmovie, 
		((select count(id) count, bnum from viewcheck 
		<where>
			<foreach collection="ageList" item="item" >
				or id=#{item}
			</foreach>
		</where>
		group by bnum order by count desc)F)
		where basicmovie.num=F.bnum
	</select>
</mapper>